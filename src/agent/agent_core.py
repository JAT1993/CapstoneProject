import pandas as pd
from langchain.agents import initialize_agent, Tool, AgentType
from langchain.tools import tool
from langchain_community.chat_models import AzureChatOpenAI
from langchain_core.prompts import PromptTemplate
from openai import AzureOpenAI
from dotenv import load_dotenv

from src.anomaly_detection import quality_analysis,detect_anomalies_zscore,detect_anomalies_iqr
from simulation.scenario_simulation import simulate_production
from simulation.genai_interface import llm
from memory import initialize_memory


# Load environment variables from .env (OpenAI API Key)
load_dotenv()

# --- Define Tools ---
tool_quality_analysis = Tool(
    name="Quality Analysis",
    func=quality_analysis,
    description="Analyzes product defects and returns defective products."
)

tool_detect_anomalies_zscore = Tool(
    name="Z-Score Anomaly Detection",
    func=detect_anomalies_zscore,
    description="Detects anomalies in sensor data based on z-score."
)

tool_detect_anomalies_iqr = Tool(
    name="IQR Anomaly Detection",
    func=detect_anomalies_iqr,
    description="Detects anomalies in sensor data using interquartile range (IQR)."
)

tool_simulate_production = Tool(
    name="Production Simulation",
    func=simulate_production,
    description="Simulates production adjustments based on rate, defects, temperature, and maintenance schedules."
)

tools = [
    tool_quality_analysis,
    tool_detect_anomalies_zscore,
    tool_detect_anomalies_iqr,
    tool_simulate_production
]

class ManufacturingAgent:
    def __init__(self, llm: AzureOpenAI, tools: list, memory_context_window: int = 3):
        """
        Initialize the Manufacturing Agent with LLM, tools, and memory.

        Args:
            llm (AzureOpenAI): The Azure OpenAI instance for reasoning.
            tools (list): List of tools for the agent to utilize.
            memory_context_window (int): Context window for memory (default: 3).
        """
        # Attach the LLM and tools
        self.llm = llm
        self.tools = tools

        # Set the memory context window
        self.memory = initialize_memory(memory_context_window)

        # Build the agent with tools, memory, and reasoning ability
        self.agent = self._build_agent()

    def _build_agent(self):
        """
        Build and configure the autonomous agent.
        """
        # Prompt template for reasoning
        prompt_template = """
        You are an autonomous manufacturing assistant designed to analyze data, detect anomalies, and simulate production scenarios.
        You can:
        - Provide quality defect analysis using the provided tools.
        - Detect anomalies in sensor data (e.g., temperature, vibration) using statistical methods like Z-Score or IQR.
        - Simulate production scenarios based on different adjustments (temperature thresholds, defect rate changes, and maintenance schedules).
        - Use memory from previous conversations to improve context-aware responses.

        Tools available:
        - Quality Analysis
        - Z-Score Anomaly Detection
        - IQR Anomaly Detection
        - Production Simulation

        Use the tools to answer the user query and provide actionable recommendations.

        User Query: {query}
        """
        prompt = PromptTemplate(template=prompt_template, input_variables=["query"])

        # Initialize the agent with memory and tools
        agent = initialize_agent(
            tools=self.tools,
            llm=self.llm,
            agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,
            memory=self.memory,
            prompt=prompt,
            verbose=True
        )
        return agent

    def run(self, query: str) -> str:
        """
        Run the agent to execute the query and return the response.

        Args:
            query (str): The user query to process.

        Returns:
            Response generated by the agent.
        """
        try:
            response = self.agent.run(query)
            return response
        except Exception as e:
            return f"Error processing query: {str(e)}"


# --- Example Usage ---
if __name__ == "__main__":

    # 1. Create Manufacturing Agent
    manufacturing_agent = ManufacturingAgent(llm, tools=tools, memory_context_window=3)

    # 3. Provide queries to the agent
    print("\n### Running Agent ###\n")

    query_1 = "Analyze defect rates and flag defective products."
    query_2 = "Detect anomalies in sensor_1_temp using Z-Score."
    query_3 = "Simulate production adjustments for shift 2 with a 15% rate increase and temperature threshold set at 80."
    query_4 = "What were the recommendations for addressing anomalies?"

    # Execute queries
    print(f"Query 1 Response:\n{manufacturing_agent.run(query_1)}\n")
    print(f"Query 2 Response:\n{manufacturing_agent.run(query_2)}\n")
    print(f"Query 3 Response:\n{manufacturing_agent.run(query_3)}\n")
    print(f"Query 4 Response:\n{manufacturing_agent.run(query_4)}\n")